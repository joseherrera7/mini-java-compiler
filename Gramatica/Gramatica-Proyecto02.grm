{String Char} = {Printable} - ["]
StartWithNoZeroDecimalIntegerLiteral = {NoZeroDigit}{Digit}*{LongTypeSuffix}?
StartWithZeroDecimalIntegerLiteral = '0'{LongTypeSuffix}? 
HexIntegerLiteral = '0'('x'|'X'){HexDigit}+{LongTypeSuffix}?
FloatingPointLiteral   = {Digit}+'.'{Digit}+{FloatTypeSuffix}? | {Digit}+{FloatTypeSuffix} | '.'{Digit}+{FloatTypeSuffix}?
FloatingPointLiteralExponent = {Digit}+'.'{Digit}+{ExponentPartIndicator}{Sign}?{Digit}+{FloatTypeSuffix}? | {Digit}+{ExponentPartIndicator}{Sign}?{Digit}+{FloatTypeSuffix}? | '.'{Digit}+{ExponentPartIndicator}{Sign}?{Digit}+{FloatTypeSuffix}?
             

ident = {IdLetter}{IdAlphaNumeric}*
boolConstant = 'true' | 'false'
stringConstant = '"'{String Char}*'"'
        
<DecimalIntegerLiteral> 
        ::= StartWithZeroDecimalIntegerLiteral
         |  StartWithNoZeroDecimalIntegerLiteral
                
<doubleConstant> 
        ::= FloatingPointLiteral
         |  FloatingPointLiteralExponent

<intConstant> 
        ::= <DecimalIntegerLiteral>
         |  HexIntegerLiteral  

             
"Case Sensitive" = 'True'
Comment Start = '/*'
Comment End = '*/'
Comment Line = '//'
"Start Symbol" = <Program>
<Program> ::= <Decls>
<Decls> ::= <Decl>
         | <Decls> <Decl>
<Decl> ::= <VariableDecl>  
        | <FunctionDecl> 
        | <ConstDecl> 
        | <ClassDecl>
        | <InterfaceDecl>
<VariableDecl> ::= <Variable> ';'
<Variable> ::= <Type> ident
<ConstDecl> ::= 'static' <ConstType> ident ';'
<ConstType> ::= 'int' 
        | 'double'
        | 'boolean'
        | 'string'
<Type> ::= 'int'
        | 'double'
        | 'boolean'
        | 'string'
        | ident
        | <Type> '[]' 
<FunctionDecl> ::= <Type> ident '(' <Formals> ')' <StmtBlock> 
        | 'void' ident '(' <Formals> ')' <StmtBlock>
<Formals> ::= <Variable> ',' <Formals> 
        | <Variable>
<ClassDecl> ::= 'class' ident <Extends> <Implements> '{' <Field> '}'
             | 'class' ident <Implements> '{' <Field> '}'
             | 'class' ident <Extends> '{' <Field> '}'
             | 'class' ident '{' <Field> '}'
             | 'class' ident '{' '}'
<Extends> ::= 'extends' ident
<Implements> ::= 'implements' <ImplementsPrima>
<ImplementsPrima> ::= ident 
                   | <ImplementsPrima> ',' ident
<Field> ::= <FieldPrima>
         | <Field> <FieldPrima> 
<FieldPrima> ::=  <VariableDecl>
        | <FunctionDecl>
        | <ClassDecl> 
<InterfaceDecl> ::= 'interface' ident '{' <Prototype> '}'
                 | 'interface' ident '{' '}'
<Prototype> ::= <PrototypePrima>
             | <Prototype> <PrototypePrima>
<PrototypePrima> ::=  <Type> ident '(' <Formals> ')' ';'
                 | 'void' ident '(' <Formals> ')' ';'
<StmtBlock> ::= '{' <VariableDecl> <ConstDecl> <Stmt> '}'
             | '{' '}'
<Stmt> ::=  <StmtPrima>
        | <Stmt> <StmtPrima>
<StmtPrima> ::= <ExprStmt> ';'
<ExprStmt> ::= <Expr> |
<Stmt> ::= <ifStmt> <Stmt>
<Stmt> ::= <WhileStmt> <Stmt>
<Stmt> ::= <ForStmt> <Stmt>
<Stmt> ::= <BreakStmt> <Stmt>
<Stmt> ::= <ReturnStmt> <Stmt>
<Stmt> ::= <PrintStmt> <Stmt>
<Stmt> ::= <StmtBlock> <Stmt>
<ifStmt> ::= 'if' '(' <Expr> ')' <Stmt> <ElseStmt>
<ElseStmt>::=  'else' <Stmt> |
<WhileStmt> ::= 'while' '(' <Expr> ')' <Stmt>
<ForStmt> ::= 'for' '(' <Expr> ';' <Expr> ';' <Expr> ')' <Stmt>
<ReturnStmt> ::= 'return' <Expr> ';' 
<BreakStmt> ::= 'break' ';'
<PrintStmt> ::= 'System.out.println''(' <Expr><ExprPrima> ',' ')'';'
<ExprPrima> ::= <Expr> | 
<Expr> ::= <LValue> '=' <Expr> 
<Expr> ::= <Constant> 
<Expr> ::= <LValue> 
<Expr> ::= 'this'
<Expr> ::= '(' <Expr> ')'  
<Expr> ::= <Expr> '+' <Expr> 
<Expr> ::= <Expr> '/' <Expr> 
<Expr> ::= <Expr> '%' <Expr> 
<Expr> ::= '-' <Expr> 
<Expr> ::= <Expr> '>' <Expr> 
<Expr> ::= <Expr> '>=' <Expr> 
<Expr> ::= <Expr> '!=' <Expr> 
<Expr> ::= <Expr> '||' <Expr> 
<Expr> ::= '!'<Expr> 
<Expr> ::= 'New''('ident')'
<LValue> ::= ident 
<LValue> ::= <Expr>'.'ident
<Constant> ::= <intConstant> 
<Constant> ::= <doubleConstant> 
<Constant> ::= boolConstant 
<Constant> ::= stringConstant 
<Constant> ::= 'null'

