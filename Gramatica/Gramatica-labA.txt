Program ::= Decl
Decl ::= VariableDecl | FunctionDecl | Decl
VariableDecl ::= Variable ;
Variable ::= Type ident
//	Type ::= int Z | double Z | bool Z | string Z | ident Z
Z ::= [] Z | epsilon
FunctionDecl ::= Type K |  void K
K ::= ident ( Formals ) StmtIntermedia
StmtIntermedia ::= Stmt StmtIntermedia | epsilon 
Formals ::= Variable VariableIntermedia , | epsilon
VariableIntermedia ::= Variable VariableIntermedia | epsilon
Stmt ::= IfStmt | PrintStmt | Expr ;
IfStmt ::= if ( Expr ) Stmt ElseViene
ElseViene ::= else Stmt | epsilon
PrintStmt ::= Print ( Expr ExprIntermedia , ) ;
ExprIntermedia ::= Expr ExprIntermedia | epsilon
Expr ::= X Expr'
Expr' ::= && X Expr | || X Expr | epsilon
X ::= AX'
X' ::= ==A X' | !=A X' | epsilon
A ::= BA'
A' ::= <B A' | >B A' | >=B A' | <=B A' |epsilon
B ::= CB'
B' ::= +C B' | -C B' | epsilon
C ::= DC'
C' ::= *D C' | /D C' | %D C' | epsilon
D ::= LValue = Expr | Constant | LValue | this | ExprViene | New(ident) | (Expr) | - Expr
/	LValue ::= ident | Expr.ident | Expr [Expr]
//	Constant ::= intConstant | doubleConstant | boolConstant | stringConstant | null