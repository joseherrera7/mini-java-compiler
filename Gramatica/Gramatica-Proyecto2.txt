<Program> ::= <Decl><DeclPrima>
<DeclPrima> ::= <Decl> | epsilon
<Decl> ::= <VariableDecl>  
<Decl> ::= <FunctionDecl> 
<Decl> ::= <ConstDecl> 
<Decl> ::= <ClassDecl>
<Decl> ::= <InterfaceDecl>
<VariableDecl> ::= <Variable> ";" <VariableDecl>
<VariableDecl> ::= epsilon
<Variable> ::= <Type> ident
<ConstDecl> ::= "static" <ConstType> ident ";" <ConstDecl>
<ConstDecl> ::= epsilon
<ConstType> ::= "int" 
<ConstType> ::= "double" 
<ConstType> ::= "boolean"
<ConstType> ::= "string"
<Type> ::= "int"
<Type> ::= "double" 
<Type> ::= "boolean" 
<Type> ::= "string" 
<Type> ::= ident 
<Type> ::= <Type> "[]"
<FunctionDecl> ::= <Type> ident "(" <Formals> ")" <StmtBlock> 
<FunctionDecl> ::= void ident ( <Formals> ) <StmtBlock>
<Formals> ::= <Variable> "," <Formals> 
<Formals> ::= <Variable>
<ClassDecl> ::= class ident (extends ident)?   (implements ident+ , ) { <Field> }
<Field> ::= <VariableDecl> <Field>  
<Field> ::= <FunctionDecl> <Field>
<Field> ::= <ClassDecl> <Field> 
<Field> ::= epsilon 
<InterfaceDecl> ::= interface ident { <Prototype> }
<Prototype> ::= <Type> ident ( <Formals> ) ; <Prototype>
<Prototype> ::= void ident ( <Formals> ) ; <Prototype>
<Prototype> ::= epsilon 
<StmtBlock> ::= { <VariableDecl> <ConstDecl> <Stmt>* }
Stmt ::= < Expr > ; 
Stmt ::= ifStmt 
Stmt ::= WhileStmt 
Stmt ::= ForStmt 
Stmt ::= BreakStmt 
Stmt ::= ReturnStmt 
Stmt ::= PrintStmt 
Stmt ::= <StmtBlock>
ifStmt ::= if ( Expr ) Stmt < else Stmt >
WhileStmt ::= while ( Expr ) Stmt
ForStmt ::= for ( Expr ; Expr ; Expr ) Stmt
ReturnStmt ::= return Expr ; 
BreakStmt ::= break ;
PrintStmt ::= System.out.println( Expr+ , );
Expr ::= LValue = Expr 
Expr ::= Constant 
Expr ::= LValue 
Expr ::= this 
Expr ::= ( Expr ) 
Expr ::= Expr + Expr 
Expr ::= Expr / Expr 
Expr ::= Expr % Expr 
Expr ::= - Expr 
Expr ::= Expr > Expr 
Expr ::= Expr >= Expr 
Expr ::= Expr != Expr 
Expr ::= Expr || Expr 
Expr ::= !Expr 
Expr ::= New(ident)
LValue ::= ident 
LValue ::= Expr.ident
Constant ::= intConstant 
Constant ::= doubleConstant 
Constant ::= boolConstant 
Constant ::= stringConstant 
Constant ::= null
